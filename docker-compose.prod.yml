version: '3.8'

services:
  postgres:
    image: postgres:17
    container_name: castle-postgres-prod
    ports:
      - "10001:5432"  # 외부 접근용 (pgAdmin 등)
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    restart: always
    networks:
      - castle-network

  redis:
    image: redis:7-alpine
    container_name: castle-redis-prod
    ports:
      - "10002:6379"  # 외부 접근용 (모니터링 등)
    volumes:
      - redisdata_prod:/data
    restart: always
    networks:
      - castle-network

  game-server:
    build:
      context: ./CastleLordTycoon.Server
      dockerfile: Dockerfile
    container_name: castle-server-prod
    ports:
      - "10010:8080"  # Nginx reverse proxy로 연결
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__PostgreSQL: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      ConnectionStrings__Redis: "${REDIS_HOST}:${REDIS_PORT}"
      Jwt__SecretKey: ${JWT_SECRET_KEY}
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__AccessTokenExpirationMinutes: ${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES}
      Jwt__RefreshTokenExpirationDays: ${JWT_REFRESH_TOKEN_EXPIRATION_DAYS}
      SignalR__HeartbeatIntervalSeconds: ${SIGNALR_HEARTBEAT_INTERVAL_SECONDS}
      SignalR__ClientTimeoutSeconds: ${SIGNALR_CLIENT_TIMEOUT_SECONDS}
    depends_on:
      - postgres
      - redis
    networks:
      - castle-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  pgdata_prod:
    driver: local
  redisdata_prod:
    driver: local

networks:
  castle-network:
    driver: bridge
